# -*- coding: utf-8 -*-
"""Monte_carlo_approach.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z48yjbapZaUAoOeASErx19_JPeCJNdsj

Import Necessary Libraries
"""

import numpy as np
import pandas as pd
import datetime as dt
import yfinance as yf
import matplotlib.pyplot as plt
from scipy.stats import norm

"""Set Time to a certain number of years"""

years = 5
endDate= dt.datetime(2023,10,16)
startDate = endDate - dt.timedelta(days=365*years)

"""Creating a list of Indexes"""

tickers = ['^NSEI','^BSESN']

"""Download daily adjusted closing prices for the Indices"""

adj_close_df=pd.DataFrame()
for i in tickers:
  data=yf.download(i, start=startDate, end=endDate)
  adj_close_df[i]=data['Adj Close']
print(adj_close_df)

"""Calculate the simple daily returns and drop any NAs"""

daily_returns = adj_close_df / adj_close_df.shift(1) - 1
daily_returns = daily_returns.dropna()
print(daily_returns)
#daily_returns.to_excel('returns.xlsx')
#from google.colab import files
#files.download('returns.xlsx')

"""Create a portfolio"""

weights=np.array([0.5,0.5])
print(weights)

"""Calculate the historical portfolio returns"""

historical_returns=(daily_returns*weights).sum(axis=1)
historical_returns_df = historical_returns.to_frame()
historical_returns_df.columns = ['Portfolio returns']
print(historical_returns_df)

"""Find required days historical returns"""

days = 1
range_returns = historical_returns_df.rolling(window=days).sum()
range_returns = range_returns.dropna()
print(range_returns)

"""calculate mean and standard deviation"""

portfolio_mean=range_returns['Portfolio returns'].mean()
portfolio_std_dev=range_returns['Portfolio returns'].std()
print(f'portfolio average Return: {portfolio_mean*100:.2f}%')
print(f'Portfolio Standard Deviation: {portfolio_std_dev*100:.2f}%')

"""Fixing confidence interval"""

confidence_interval=0.99

"""Monte Carlo Simulation"""

# Set your mean and standard deviation
mean = portfolio_mean
std_dev = portfolio_std_dev
# Create an array of numbers from 1 to 10000
numbers = np.arange(1, 10001)
# Generate random numbers from a normal distribution
daily_return_values = norm.ppf(np.random.rand(10000), loc=mean, scale=std_dev)
# Create a DataFrame
df = pd.DataFrame({
    #'Series': numbers,
    'daily_return_values': daily_return_values
}, index=numbers)
print(df)
#df.to_excel('simulation.xlsx')
#from google.colab import files
#files.download('simulation.xlsx')

"""Calculate n day VaR"""

VaR = np.percentile(daily_return_values, 100-(confidence_interval*100))
print(f'VaR: {VaR*100:.2f}%')

"""Plot the result of Monte Carlo Simulation"""

return_window=days
plt.hist(daily_return_values*100, bins=50, density=True)  # Multiply by 100 to convert to percentage
plt.xlabel(f'{return_window}- Day Portfolio Return (Percentage value)')
plt.ylabel('Frequency')
plt.title(f'Distribution of Portfolio {return_window}-Day Returns (Percentage value)')
VaR_percent = VaR * 100  # Convert VaR to percentage
plt.axvline(VaR_percent, color='r', linestyle='dashed', linewidth=2, label=f'VaR at {confidence_interval:.0%} confidence level: {VaR_percent:.2f}%')  # Show VaR value on the line
plt.legend()
plt.show()